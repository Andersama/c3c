// #target: x64-darwin

union Baz
{
    int x;
    double y;
}
struct Bar
{
    int x;
    int y;
}

func int test()
{
    Baz ffe = { .x = 1 };
    int[1] azz = {};
    int[*] a = {};
    var $foo = { 11, 22, 33 };
    static int foo1 = $foo[1];
    int foo2 = $foo[2];
    var $foos = { "Hello!" };
    char* str = $foos[0];
    bool x = ! int[] { 1, 2, 3 };
    Bar b = {};
    Baz z = {};
    int[] sub = {};
    Bar[] foo = {};
    Baz[3] baz = {};
    return 1;
}


/* #expect: general_tests.ll

%Baz = type { double }
%Bar = type { i32, i32 }
%"int[]" = type { i32*, i64 }
%"Bar[]" = type { %Bar*, i64 }

@Baz = linkonce_odr constant i8 1
@Bar = linkonce_odr constant i8 1
@.__const = private constant { i32, [4 x i8] } { i32 1, [4 x i8] undef }, align 8
@test.foo1 = hidden global i32 22, align 4
@.str = private constant [7 x i8] c"Hello!\00", align 1

; Function Attrs: nounwind
define i32 @general_tests.test() #0 {
entry:
  %ffe = alloca %Baz, align 8
  %azz = alloca [1 x i32], align 4
  %a = alloca [0 x i32], align 4
  %foo2 = alloca i32, align 4
  %str = alloca i8*, align 8
  %x = alloca i8, align 1
  %literal = alloca [3 x i32], align 4
  %b = alloca %Bar, align 4
  %z = alloca %Baz, align 8
  %sub = alloca %"int[]", align 8
  %literal1 = alloca [0 x i32], align 4
  %foo = alloca %"Bar[]", align 8
  %literal2 = alloca [0 x %Bar], align 4
  %baz = alloca [3 x %Baz], align 16
  %0 = bitcast %Baz* %ffe to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %0, i8* align 8 bitcast ({ i32, [4 x i8] }* @.__const to i8*), i32 8, i1 false)
  %1 = bitcast [1 x i32]* %azz to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %1, i8 0, i64 4, i1 false)
  %2 = bitcast [0 x i32]* %a to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 0, i1 false)
  store i32 33, i32* %foo2, align 4
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8** %str, align 8
  %3 = getelementptr inbounds i32, [3 x i32]* %literal, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds i32, [3 x i32]* %literal, i32 1
  store i32 2, i32* %4, align 4
  %5 = getelementptr inbounds i32, [3 x i32]* %literal, i32 2
  store i32 3, i32* %5, align 4
  %6 = bitcast [3 x i32]* %literal to i32*
  %7 = insertvalue %"int[]" undef, i32* %6, 0
  %8 = insertvalue %"int[]" %7, i64 3, 1
  %9 = extractvalue %"int[]" %8, 1
  %neq = icmp ne i64 %9, 0
  %not = xor i1 %neq, true
  %10 = zext i1 %not to i8
  store i8 %10, i8* %x, align 1
  %11 = bitcast %Bar* %b to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 8, i1 false)
  %12 = bitcast %Baz* %z to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 8, i1 false)
  store [0 x i32] zeroinitializer, [0 x i32]* %literal1, align 4
  %13 = bitcast [0 x i32]* %literal1 to i32*
  %14 = insertvalue %"int[]" undef, i32* %13, 0
  %15 = insertvalue %"int[]" %14, i64 0, 1
  store %"int[]" %15, %"int[]"* %sub, align 8
  store [0 x %Bar] zeroinitializer, [0 x %Bar]* %literal2, align 4
  %16 = bitcast [0 x %Bar]* %literal2 to %Bar*
  %17 = insertvalue %"Bar[]" undef, %Bar* %16, 0
  %18 = insertvalue %"Bar[]" %17, i64 0, 1
  store %"Bar[]" %18, %"Bar[]"* %foo, align 8
  %19 = bitcast [3 x %Baz]* %baz to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 24, i1 false)
  ret i32 1
}